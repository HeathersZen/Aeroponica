esphome:
  name: wall$wallNumber-line$lineNumber-temphumid
  friendly_name: Wall$wallNumber-Line$lineNumber-TempHumid
  on_boot:
    priority: 200
    then:
      # - lambda: |-        
      #     delay(500);  
      - script.execute: 
          id: flashLED
          flashCount: 10

esp8266:
  board: esp01_1m

# Enable logging
logger:
  level: debug
  # logs:
  #   switch: error
  #   text_sensor: error
  #   sensor: info

# Enable Home Assistant API
api:
  encryption:
    key: "${encryptionKey}"

ota:
  - platform: esphome
    password: "${otaPassword}"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Wall2-Line{$lineNumber}-Temphumid"
    password: "{$fallbackHotspotPassword}"

captive_portal:

web_server:
  port: 80
    
i2c:
  sda: 4
  scl: 5
  scan: true
  frequency: 50khz
  # timeout: 10ms

external_components:
   - source:
        type: git
        url: https://github.com/mrtoy-me/esphome-components-test
     components: [ sht3xd ]

sensor:
  - platform: sht3xd
    temperature:
      name: "Line ${lineNumber} Interior Temperature (C)"
      id: 'line${lineNumber}InteriorTempC'
    humidity:
      name: "Line ${lineNumber} Interior Humidity"
      id: 'line${lineNumber}InteriorHumidity'
    address: 0x44
    update_interval: 60s

    # Temperature probe (converted to F)
  - platform: template
    id: 'line${lineNumber}InteriorTempFRaw'
    name: "Line ${lineNumber} Interior Temperature Raw (F)"
    lambda: return id(line${lineNumber}InteriorTempC).state * (9.0/5.0) + 32.0;
    unit_of_measurement: "°F"
    accuracy_decimals: 1
    update_interval: 60s
    icon: mdi:icon7-sun-fill    
    on_value: 
      - lambda: |-
          id(line${lineNumber}InteriorTempFCalibrated).publish_state(id(line${lineNumber}InteriorTempFRaw).state + id(line${lineNumber}CalibrationOffsetFahrenheit).state);

    # Temperature probe (converted to F)
  - platform: template
    id: 'line${lineNumber}InteriorTempFCalibrated'
    name: "Line ${lineNumber} Interior Temperature (F - Calibrated)"
    lambda: return id(line${lineNumber}InteriorTempFRaw).state + id(line${lineNumber}CalibrationOffsetFahrenheit).state;
    unit_of_measurement: "°F"
    accuracy_decimals: 1
    update_interval: 120s
    icon: mdi:icon7-sun-fill    

number:
  # A number to use to offset whatever reading is taken to correct to the calibrated temp
  - platform: template
    name: Line ${lineNumber} Calibration Offset (F)
    id: 'line${lineNumber}CalibrationOffsetFahrenheit'
    restore_value: True
    min_value: -100
    max_value: 100
    initial_value: 0
    step: .1
    optimistic: true
    mode: BOX
    on_value: 
      - lambda: |-
          id(line${lineNumber}InteriorTempFCalibrated).publish_state(id(line${lineNumber}InteriorTempFRaw).state + id(line${lineNumber}CalibrationOffsetFahrenheit).state);

switch:
  - platform: gpio
    pin: 2
    id: LED
    name: LED
    inverted: True
    internal: True
    restore_mode: RESTORE_DEFAULT_OFF

script:
  # Flash the LED to indicate the system is working normally. This is called on startup and intermittently by the interval tag.
  - id: flashLED
    mode: single
    parameters: 
      flashCount: int
    then:
      - repeat:
          count: !lambda 'return flashCount;'
          then:
            - switch.turn_on: LED  
            - delay: 200ms
            - switch.turn_off: LED  
            - delay: 200ms

text_sensor:
  - platform: template
    id: yamlVersion
    name: YAML Version
    lambda:       
      return {"v .0.1 Nov 27, 2024 18:10"};

interval:
  - interval: 1min
    then:
      - logger.log: "Heartbeat"
      - script.execute: 
          id: flashLED
          flashCount: 3  