packages:
  device_base: !include
    file: ../common/esp8266DevBoard.yml
    vars:
      NAME: tankfillsensordev
      FRIENDLY_NAME: Tank Fill Sensor TOF10120
      LOG_LEVEL: DEBUG
      ENCRYPTION_KEY: "O8hdA9BjOKarJ53rWlg7L8Cv5iVSVRU2xPsRat9pgKg="
      OTA_PASSWORD: "9a8761636d28715126cbb05d60f8c8b2"
      FALLBACK_HOTSPOT_PASSWORD: "UhtYT6DWw17v"
  yamlVersion: !include
    file: ../common/yamlVersion.yml
    vars:
      YAML_VERSION: "v1.0.0 Dec 24, 2024 00:22"
  heartbeat: !include
    file: ../common/heartbeat.yml
    vars:
      LED_GPIO: GPIO2
      LED_INVERTED: true

# Enable logging
logger:
  baud_rate: 0
  logs:
    uart: ERROR
    logger: ERROR
    sensor: ERROR
    uart_debug: ERROR
    text_sensor: ERROR
    number: ERROR

uart:
 - id: uart_bus1
   rx_pin: 3 #This is the TX pin on the esp8266 (tywe3s) https://developer.tuya.com/en/docs/iot/wifie3smodule?id=K9605ua1cx9tv
   tx_pin: 1
   baud_rate: 115200
   debug:
     direction: BOTH
     dummy_receiver: true
     after:
      delimiter: "\r\n" #the data is sent in the format XXmm\r\n where XX is an integer value between 0-2000
     sequence:
        - lambda: |-
            std::string str(bytes.begin(), bytes.end());
            static unsigned long lastUpdate = 0;
            bool isAlarm;
            bool isDistance;
            bool isState;
            int distanceMeasured = 0;
            std::string statusValue;
            auto TAG = "DISTANCE";                    
                       
            int result = 0;

            //ESP_LOGI(TAG, "Read: %s", str.c_str() );

            if(str.find("d:") != std::string::npos) {
                result = sscanf(str.c_str(), "d: %d mm", &distanceMeasured);

                id(last_update).publish_state(id(homeassistant_time).now());
            }
            else if (str.find("State;") != std::string::npos) {
                std::string::size_type found = str.find(",");
              
                if(found != std::string::npos) {
                  statusValue = str.substr(found + 2, str.length() - (found + 4));
                }
            }

            if (millis() - lastUpdate >= 1000) {
              lastUpdate = millis();

              if (distanceMeasured > 0 || statusValue == "MinRangeFail") {
                id(distanceValueSensor).publish_state(distanceMeasured);
              }

              if (statusValue.length() > 0) {
                id(statusValueSensor).publish_state(statusValue.c_str());
              }
            }

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: America/Los_Angeles

sensor:
  - platform: template
    name: "Distance"
    id: "distanceValueSensor"
    unit_of_measurement: "mm"
    device_class: "distance"
    on_value: 
      then:
        - component.update: tankLevel

  - platform: template
    name: "Tank Level"
    id: "tankLevel"
    update_interval: 5s
    unit_of_measurement: "%"
    state_class: measurement
    lambda: |-
      if (id(distanceValueSensor).state > id(tankEmptyDistance).state)
        return 0;
      else
      {
        float tankHeight = float(id(tankEmptyDistance).state) - float(id(tankFullDistance).state); // Total distance of the tank from top to bottom
        id(tankHeightSensor).publish_state(std::to_string(tankHeight));

        float fillAmount = ((float(id(distanceValueSensor).state) - float(id(tankFullDistance).state)) / tankHeight) * 100;
        id(fillAmountSensor).publish_state(std::to_string(fillAmount));
        return 100 - fillAmount;
      }

  - platform: template
    name: "Last Update"
    device_class: timestamp
    id: last_update

  # - platform: template
  #   name: "Seconds Since Last Update"
  #   id: secondsSincelastUpdate
  #   device_class: ""
  #   lambda: |-
  #     auto elapsed = id(last_update).state.elapsed();
  #     return  { elapsed.count() }; 

text_sensor:
  - platform: template
    id: "statusValueSensor"
    name: "Status Value"

  - platform: template
    id: "tankHeightSensor"
    name: "Tank Height"
    internal: true    
  
  - platform: template
    id: "fillAmountSensor"
    name: "Fill Amount"  
    internal: true    

  - platform: template
    name: "Current time"
    id: "current_time"
    lambda: |-
      char str[17];
      time_t currTime = id(homeassistant_time).now().timestamp;
      strftime(str, sizeof(str), "%Y-%m-%d %H:%M", localtime(&currTime));
      return  { str };
    update_interval: 60s

number:
  - platform: template
    id: tankEmptyDistance
    name: "Tank Empty Distance"
    optimistic: True
    step: 1
    initial_value: 381
    min_value: 0
    max_value: 10000
    mode: BOX
    on_value: 
      then:
        - component.update: tankLevel

  - platform: template
    id: tankFullDistance
    name: "Tank Full Distance"
    optimistic: True
    step: 1
    initial_value: 100
    min_value: 0
    max_value: 10000
    mode: BOX
    on_value: 
      then:
        - component.update: tankLevel
