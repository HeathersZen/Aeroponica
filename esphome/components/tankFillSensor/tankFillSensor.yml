esphome:
  name: tankfillsensor
  friendly_name: TankFillSensor
  on_boot:
    then:
      - script.execute: 
          id: flashLED
          flashCount: 10

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "o3EvMDD/J4uNBDenivBtdMOk8cZllQhWC5BNqPoQ3v0="

ota:
  - platform: esphome
    password: "19e8fb4db37bbf0f6c3b38bfc3fbf38d"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Tankfillsensor Fallback Hotspot"
    password: "6eVybLu8FMFi"

captive_portal:

web_server:
  port: 80

uart:
  tx_pin: GPIO18
  rx_pin: GPIO05
  baud_rate: 9600

sensor:
  - platform: "a02yyuw"
    name: "Distance"
    id: Distance
    filters:
      - filter_out: nan
      - median:
          window_size: 5
          send_every: 4
      - clamp:
          min_value: 35
          max_value: 400
      - throttle: 10s
  - platform: template
    name: "Tank Fill Percentage"
    update_interval: 10s
    id: tankFillPercentage
    unit_of_measurement: "%"
    state_class: measurement
    on_value: 
      then:
        - script.execute: checkTankLevelLimits
    lambda: |-
      // The tank is 38 centimeters high; the percentage filled is 0% when the distance is >= 330 mm, and 100% when the distance is <= 40 mm
      // which is the minimum value the sensor can return.
      float dVal = id(Distance).state - 40.0;
      float level = 100 - (dVal/3.3);

      // If the level returned is greater than 100, round it to 100 (i.e. tank is over filled)
      if (level >= 100)
      {  return 100; }
      // If the level returned is less than 0, round it to 0 (i.e. tank is really empty)
      else if (level <= 0)
      {  return 0; }
      else
      {  return level; }

switch:
    ## Allows the silencing of various system alerts. Should default to true.
  - platform: template
    name: "Alerts Enabled"
    id: isAlertsEnabled  
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: gpio
    pin: 2
    id: LED
    name: LED
    inverted: True
    restore_mode: RESTORE_DEFAULT_OFF

text_sensor:
  - platform: template
    name: "Status"
    id: Status
    lambda: |-
      if ( id(tankFillPercentage).state <= id(alarmThreshold).state )
      { return {"CRITICAL"}; }
      else
      { return {"OK"}; }

  - platform: template
    id: yamlVersion
    name: YAML Version
    lambda:       
      return {"v 1.0 Nov 25, 2024 20:00"};

number:
    # Value at which the tank refill solenoid should be closed.
  - platform: template
    unit_of_measurement: "%"
    device_class: volume_storage
    id: maxThreshold
    name: Max Fill
    initial_value: 95
    min_value: 0
    max_value: 100
    step: 1
    mode: BOX
    optimistic: True
    # Value at which the tank refill solenoid should be opened.
  - platform: template
    id: fillThreshold
    name: Fill Threshold
    initial_value: 60
    min_value: 0
    unit_of_measurement: "%"
    device_class: volume_storage    
    max_value: 100
    step: 1
    mode: BOX
    optimistic: True
    # Value at which critical alerts will be sent
  - platform: template
    id: alarmThreshold
    name: Alarm Threshold
    initial_value: 20
    min_value: 0
    unit_of_measurement: "%"
    device_class: volume_storage
    max_value: 100
    step: 1
    mode: BOX
    optimistic: True

################
## Scripts
################
script:
  - id: checkTankLevelLimits
    mode: single
    then:
    - logger.log:
        format: "checkTankLevelLimits: IsAlertsActive value: %s"
        args: ['id(isAlertsEnabled).state ? "true" : "false"']
    - if:
        condition:
          - and:
              - switch.is_on: isAlertsEnabled
              - lambda: 'return id(tankFillPercentage).state < id(alarmThreshold).state;'
        then:
        - homeassistant.action:
            action: script.sendalert
            data:
              title: LOW NUTRIENT TANK ALERT
            data_template:
              message: "CRITICAL! The nutrient tank is currently id(tankFillPercentage).state % full. You should fill it immediately!"
  # Flash the LED to indicate the system is working normally. This is called on startup and intermittently by the interval tag. 
  - id: flashLED
    mode: single
    parameters: 
      flashCount: int
    then:
      - repeat:
          count: !lambda 'return flashCount;'
          then:
            - switch.turn_on: LED  
            - delay: 200ms
            - switch.turn_off: LED  
            - delay: 200ms

