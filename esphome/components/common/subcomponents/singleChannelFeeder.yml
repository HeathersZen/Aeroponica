esphome:
  on_boot:
    then:
      - lambda: |-
          id(nextFeedCountdown).publish_state(int(id(feedRestDuration).state));

################
## Scripts
################
script:
  - id: feedPlantsByTime
    mode: single
    then:
      - logger.log:
          format: "${FRIENDLY_NAME}.feedPlantsByTime: Feed cycle initiated feedMistingDuration: %f  feedRestDuration: %f"
          args: ['id(feedMistingDuration).state', 'id(feedRestDuration).state']
      - switch.turn_on: feeder_${NAME}
      - delay: !lambda "return id(feedMistingDuration).state * 1000;"
      - switch.turn_off: feeder_${NAME}
      - logger.log:
          format: "${FRIENDLY_NAME}.feedPlantsByTime: Feed cycle completed."

###############################
## Switches
###############################
switch:
  - platform: template
    name: "Feed Enabled"
    id: isFeedEnabled  
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_on:
      - lambda: |-
          id(nextFeedCountdown).publish_state(int(id(feedRestDuration).state));

  - platform: gpio
    pin: ${FEEDER_GPIO}
    name: "${FRIENDLY_NAME} Feeder"
    id: "feeder_${NAME}"

########################
## Numbers
########################
number:
  - platform: template
    name: Feed - Misting Duration ## How long to open the feed solenoids for (in seconds) during each misting cycle.
    id: feedMistingDuration
    min_value: 1
    max_value: 20
    initial_value: 2.5
    step: .1
    optimistic: true
    mode: BOX
    unit_of_measurement: "duration"
  - platform: template
    name: Feed - Rest Duration ## How long to wait between feed cycles (in seconds)
    id: feedRestDuration
    min_value: 1
    max_value: 3000
    initial_value: 300
    step: 1
    optimistic: true
    mode: BOX       
    unit_of_measurement: "duration"     
    on_value:
      then:
        - lambda: |-
            id(nextFeedCountdown).publish_state(int(id(feedRestDuration).state));
  - platform: template
    name: Next Feed Countdown ## How many seconds until the next feed event
    id: nextFeedCountdown
    min_value: 1
    max_value: 3000
    initial_value: 2000
    step: 1
    optimistic: true
    mode: BOX       
    unit_of_measurement: "duration"   

button:
  - platform: template
    id: sendAlertTest
    name: Test Feed Alert
    on_press: 
      then:
        - homeassistant.action:
            action: script.sendalert
            data:
              title: ${FRIENDLY_NAME} TESTING FEED ALERT
            data_template:
              message: "(TESTING) CRITICAL! {{ feedLineNameToken }} measured less than the underfeed alert threshold. Delivered: {{ deliveredAmount }} Underfeed threshold: {{ expectedAmount }}"
            variables:
              feedLineNameToken: return 999;
              deliveredAmount: return 222;
              expectedAmount: return 333;

interval:
  - interval: 1sec
    then:
      - if:
          condition:
            - lambda: 'return id(isFeedEnabled).state == true;'
          then:
            - lambda: |-
                id(nextFeedCountdown).publish_state(id(nextFeedCountdown).state-1);
      - if: 
          condition:
            - lambda: 'return int(id(nextFeedCountdown).state) <= 0;'
          then:
            - lambda: |-
                id(nextFeedCountdown).publish_state(int(id(feedRestDuration).state));
            - script.execute: feedPlantsByTime                

