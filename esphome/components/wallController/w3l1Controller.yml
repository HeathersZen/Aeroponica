substitutions:
  NAME: w3l1controller
  FRIENDLY_NAME: "W3L1 Controller"

packages:
  device_base: !include
    file: ../common/boards/esp322ChannelRelayBoard.yml
    vars:
      NAME: ${NAME}
      FRIENDLY_NAME: ${FRIENDLY_NAME}
      LOG_LEVEL: DEBUG
      ENCRYPTION_KEY: "eghKGz0oPMDGTfFYFgaxw3iUBAujxUQbTr0KPBEAwwY="
      OTA_PASSWORD: "805de5af4da0cd679cb7e0090cd4ad50"
      FALLBACK_HOTSPOT_PASSWORD: "JP2dIejjuZTD"
  yamlVersion: !include
    file: ../common/sensors/yamlVersion.yml
    vars:
      YAML_VERSION: "v0.0.9 Jan 30, 2025 17:38"
  heartbeat: !include
    file: ../common/scripts/heartbeat.yml
    vars:
      LED_GPIO: GPIO2
      LED_INVERTED: true

# Enable logging
logger:
  baud_rate: 0
  logs:
    uart: ERROR
    logger: ERROR
    sensor: ERROR
    uart_debug: ERROR
    text_sensor: ERROR
    number: ERROR

###############################
## Switches
###############################
switch:
    ## Allows the silencing of various system alerts. Should default to true.
  - platform: template
    name: "Alerts Enabled"
    id: isAlertsEnabled  
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: gpio
    pin: GPIO16
    name: "${FRIENDLY_NAME} Feeder"
    id: "feeder_${NAME}"

  - platform: gpio
    pin: GPIO17
    name: "${FRIENDLY_NAME} Drain Pump"
    id: "drain_pump_${NAME}"

################
## Scripts
################
script:
  - id: feedPlantsByTime
    mode: single
    then:
      - logger.log:
          format: "${FRIENDLY_NAME}.feedPlantsByTime: Feed cycle initiated feedMistingDuration: %f  feedRestDuration: %f"
          args: ['id(feedMistingDuration).state', 'id(feedRestDuration).state']
      - sensor.template.publish:                                                                                                                                           
            id: lastFeedTimestamp                                                                                                                                                   
            state: !lambda 'return id(homeassistant_time).now().timestamp;'
      - switch.turn_on: feeder_${NAME}
      - delay: !lambda "return id(feedMistingDuration).state * 1000;"
      - switch.turn_off: feeder_${NAME}
      - logger.log:
          format: "${FRIENDLY_NAME}.feedPlantsByTime: Feed cycle completed."

##################
## Sensors
##################
sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: diagnostic

  - platform: template
    name: "Last Feed Timestamp"
    id: lastFeedTimestamp   
    device_class: timestamp

########################
## Numbers
########################
number:
  - platform: template
    name: Feed - Misting Duration ## How long to open the feed solenoids for (in seconds)
    id: feedMistingDuration
    min_value: 1
    max_value: 20
    initial_value: 5
    step: .1
    optimistic: true
    mode: BOX
    unit_of_measurement: "duration"
  - platform: template
    name: Feed - Rest Duration ## How long to wait between feed cycles (in seconds)
    id: feedRestDuration
    min_value: 1
    max_value: 3000
    initial_value: 300
    step: 1
    optimistic: true
    mode: BOX       
    unit_of_measurement: "duration"         

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: America/Los_Angeles

button:
  - platform: template
    id: sendAlertTest
    name: Test Feed Alert
    on_press: 
      then:
        - homeassistant.action:
            action: script.sendalert
            data:
              title: ${FRIENDLY_NAME} TESTING FEED ALERT
            data_template:
              message: "(TESTING) CRITICAL! {{ feedLineNameToken }} measured less than the underfeed alert threshold. Delivered: {{ deliveredAmount }} Underfeed threshold: {{ expectedAmount }}"
            variables:
              feedLineNameToken: return 999;
              deliveredAmount: return 222;
              expectedAmount: return 333;

interval:
  - interval: 1sec
    then:
      - if: 
          condition:
            - lambda: 'return int(id(lastFeedTimestamp).state) + int(id(feedRestDuration).state) < id(homeassistant_time).now().timestamp;'
          then:
            - script.execute: feedPlantsByTime
